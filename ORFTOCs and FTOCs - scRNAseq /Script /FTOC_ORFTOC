############## Thymic epithelial organoids mediate T cell development ##############
############## ORFTOC and FTOC single-cell RNA-Seq analysis  ##############


### Packages
library(Seurat)
library(scDblFinder)
library(scater)
library(gprofiler2)
library(scCustomize)


### Seed

set.seed(18)


### Single-cell RNA-Seq data is available here: 
# https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE240698
# GSM7707611	ORFTOC FTOC - GEX
# GSM7707612	ORFTOC FTOC - TCR
# GSM7707613	ORFTOC FTOC - HTO

### set working directory containing the datasets
# setwd(" ")


### Read data

expression_matrix <- Read10X(data.dir = getwd(), gene.column = 2)

HTOab <- expression_matrix$`Antibody Capture`
SO <- CreateSeuratObject(expression_matrix$`Gene Expression`, project = "FTOC_OrgRFTOC",assay = "RNA")
SO[["HTO"]] <- CreateAssayObject(counts = HTOab)
SO <-subset(SO, subset = nFeature_RNA > 100 & nCount_HTO > 1)


### Pre-processing for doublet removal and HTO classification

SO[["percent.mito"]] <- PercentageFeatureSet(SO, assay="RNA", pattern = "^mt-")
SO <- subset(SO, subset = nFeature_RNA > 600 & percent.mito < 10 & percent.mito > 0.4)


SO <- NormalizeData(SO, assay = "HTO", normalization.method = "CLR")

SO <- HTODemux(SO, assay = "HTO", positive.quantile = 0.99)

SOpre <- SO

SOpre <- NormalizeData(SOpre, assay = "RNA")
SOpre <- FindVariableFeatures(SOpre, selection.method = "mean.var.plot")
all.genes <- rownames(SOpre)
SOpre <- ScaleData(SOpre, features=all.genes)
SOpre <- RunPCA(SOpre, assay = "RNA", features = VariableFeatures(object = SOpre))


### Doublet removal

Doublets <- SOpre@meta.data$HTO_classification.global=="Doublet"
IDDoublets <- which(Doublets)
IDCells <- c(colnames(SOpre))
Cellnamedoublets <- IDCells[IDDoublets]

Exp.matrix2 <- as.SingleCellExperiment(SOpre)
AllDoublets <- recoverDoublets(Exp.matrix2, use.dimred="PCA", doublets=Cellnamedoublets, k=10, samples=c(1, 1))


sce.hash <- Exp.matrix2
sce.hash <- runUMAP(sce.hash, dimred="PCA")
sce.hash$proportion <- AllDoublets$proportion
sce.hash$predicted <- AllDoublets$predicted
sce.hash$known <- AllDoublets$known


gridExtra::grid.arrange(
  plotUMAP(sce.hash, colour_by="proportion") + ggtitle("Doublet proportions"),
  plotUMAP(sce.hash, colour_by="known") + ggtitle("Known doublets"),
  ggcells(sce.hash) +
    geom_point(aes(x=UMAP.1, y=UMAP.2), color="grey") +
    geom_point(aes(x=UMAP.1, y=UMAP.2), color="red", 
               data=function(x) x[x$predicted,]) +
    ggtitle("Predicted intra-sample doublets"),
  ncol=2        
)

SO[["DoubletClassification"]] <- AllDoublets$predicted


### HTO classification

Idents(SO) <- "HTO_classification.global"
SO.subsetHTO <- subset(SO, idents = "Singlet")

Idents(SO.subsetHTO) <- "DoubletClassification"
SO.subset <- subset(SO.subsetHTO, subset = DoubletClassification == "FALSE")


### Cell-cycle scoring
# ! the following commands require internet access !

s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes

mmus_s = gorth(cc.genes.updated.2019$s.genes, source_organism = "hsapiens", target_organism = "mmusculus")$ortholog_name
mmus_g2m = gorth(cc.genes.updated.2019$g2m.genes, source_organism = "hsapiens", target_organism = "mmusculus")$ortholog_name

s.genes <- mmus_s
g2m.genes <- mmus_g2m

SO.subset<- CellCycleScoring(SO.subset, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)

SO.subset <- SCTransform(SO.subset, method = "glmGamPoi", vst.flavor="v2", vars.to.regress = c("S.Score", "G2M.Score"), variable.features.n = 10000)


### PCA

SO.subset <- RunPCA(SO.subset)

ElbowPlot(SO.subset)


### Find clusters corresponding to the main input population

SO.subset18 <- FindNeighbors(SO.subset, dims = 1:18)
SO.subset18 <- FindClusters(SO.subset18, resolution = 0.005)



SO.subset18100520 <- RunUMAP(SO.subset18, dims = 1:18, n.neighbors = 10, min.dist = 0.5, seed.use = 20)
DimPlot(SO.subset18100520, reduction = "umap", group.by = 'seurat_clusters', cols = c("lightpink1", "gray62", "goldenrod1"))

SO.subset18100520.cluster.ids <- c("Immune","Epithelial","Mesenchyme")
names(SO.subset18100520.cluster.ids) <- levels(SO.subset18100520)
SO.subset18100520ID <- RenameIdents(SO.subset18100520, SO.subset18100520.cluster.ids)
DimPlot(SO.subset18100520ID, reduction = "umap", cols = c("lightpink1", "gray62", "goldenrod1"))

FeaturePlot(SO.subset18100520, c("Ptprc","Epcam","Pdgfra"))

Idents(SO.subset18100520) <- SO.subset18100520@meta.data[["seurat_clusters"]]


### Subsets the three main populations 

SO.Epithelial <- subset(SO.subset18100520, idents = 1)
SO.Immune <- subset(SO.subset18100520, idents = 0)
SO.Mesenchyme <- subset(SO.subset18100520, idents = 2)

Markers <- AverageExpression(object = SO.subset18100520, features = c("Ptprc", "Epcam", "Pdgfra"), assays = "RNA")
head(Markers)

Ptprcavalue = (Markers$RNA[1,2] + Markers$RNA[1,3])/2
Epcamvalue = (Markers$RNA[2,1] + Markers$RNA[2,3])/2
Pdgfravalue = (Markers$RNA[3,1] + Markers$RNA[3,2])/2



SO.Epithelial <- subset(SO.Epithelial, subset = Ptprc > Ptprcavalue, invert =TRUE)
SO.Epithelial <- subset(SO.Epithelial, subset = Pdgfra > Pdgfravalue, invert =TRUE)


SO.Immune <- subset(SO.Immune, subset = Epcam > Epcamvalue, invert =TRUE)
SO.Immune <- subset(SO.Immune, subset = Pdgfra > Pdgfravalue, invert =TRUE)

SO.Mesenchyme <- subset(SO.Mesenchyme, subset = Ptprc > Ptprcavalue, invert =TRUE)
SO.Mesenchyme <- subset(SO.Mesenchyme, subset = Epcam > Epcamvalue, invert =TRUE)



##### The UMAP might be slightly changing depending on R and packages version.
##### We thus provide also RDS objects corresponding to the Epithelial (SO.EpithelialID) and Immune (SO.ImmuneID) populations that were used for downstream analysis here: 



### Finding epithelial clusters

SO.Epithelial<- FindNeighbors(SO.Epithelial, dims = 1:18)
SO.Epithelial04 <- FindClusters(SO.Epithelial, resolution = 0.4)
DimPlot(SO.Epithelial04, reduction = "umap", group.by ='seurat_clusters',label = TRUE)
DimPlot(SO.Epithelial, reduction = "umap", group.by ='hash.ID')


### Finding immune clusters

SO.Immune<- FindNeighbors(SO.Immune, dims = 1:18) 
SO.Immune3 <- FindClusters(SO.Immune, resolution = 3)
DimPlot(SO.Immune3, reduction = "umap", group.by ='seurat_clusters',label = TRUE, pt.size = 1)
DimPlot(SO.Immune, reduction = "umap", group.by ='hash.ID')



### Merging and renaming immune clusters, and plotting key genes
new.cluster.ids <- c("TSP to DNearly2","Innate T Cells","DP quiescent","DP quiescent","Cd4","DP quiescent","Innate Proliferative","First Wave","DP blast", "DP quiescent", "DP quiescent","DP quiescent","Cd8","DN selected to ISP","DP69+","DN commitment","TSP to DNearly1","DP quiescent","Other Immune Cells","DP quiescent","Cd8","TSP to DNearly1","DN3a","DP blast","TSP to DNearly2","DP quiescent","Other Immune Cells","DP quiescent","DP quiescent","TSP to DNearly1")
names(new.cluster.ids) <- levels(SO.Immune3)
SO.ImmuneID <- RenameIdents(SO.Immune3, new.cluster.ids)
DimPlot(SO.ImmuneID, reduction = "umap", label = TRUE,   label.size = 6, pt.size = 1) + NoLegend()


SO.ImmuneID@active.ident <- factor(SO.ImmuneID@active.ident, 
                                   levels=c("Other Immune Cells", "Innate T Cells","Innate Proliferative", "First Wave","TSP to DNearly1", "TSP to DNearly2","DN commitment","DN3a","DN selected to ISP","DP blast","DP quiescent","DP69+","Cd4","Cd8"))
ImmuneDotPlot <- c("Kit","Cd44","Il2ra","Cd7","Tcf7","Bcl11b","Ptcra","Cd3e","Cd28","Cd4","Cd8a","Mki67","Rag1","Rag2","Myc","Cd69","Cd5","Nr4a1","Bcl2l11","Ccr7","Nlrc5","Tnfrsf4","Cd40lg","Runx3","Eomes","Sell","Klrd1","Cd68")
DotPlot(SO.ImmuneID, features = ImmuneDotPlot)

cols = c("lightgrey", "blue")
DotPlot_scCustom(SO.ImmuneID, features = ImmuneDotPlot, colors_use = cols, x_lab_rotate = TRUE)

SO.ImmuneID$ClusterName <- paste(SO.ImmuneID@active.ident)



### Renaming epithelial clusters and plotting key genes

Epithelial.cluster.ids <- c("Pre Aire mTEC","Adult Bipotent Progenitor-like","cTEC", "Early cTEC","Early mTEC","Tuft-like mTEC (IV)","Aire and Spink5 mTEC (II/III)")
names(Epithelial.cluster.ids) <- levels(SO.Epithelial04)
SO.EpithelialID <- RenameIdents(SO.Epithelial04, Epithelial.cluster.ids)
DimPlot(SO.EpithelialID, reduction = "umap", label = TRUE,   label.size = 6, pt.size = 1) + NoLegend()


FeaturePlot(SO.Epithelial, c("Cxcl12","Ascl1","Ccl21a","Psmb11","Aire","Spink5","Avil","Bpifa1"))


sessioninfo()
# R version 4.1.2 (2021-11-01)
# Platform: x86_64-w64-mingw32/x64 (64-bit)
# Running under: Windows 10 x64 (build 22631)
# 
# Matrix products: default
# 
# locale:
#   [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252   
# [3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C                          
# [5] LC_TIME=English_United States.1252    
# 
# attached base packages:
#   [1] stats4    stats     graphics  grDevices utils     datasets  methods   base     
# 
# other attached packages:
#   [1] scCustomize_1.1.1           gprofiler2_0.2.1            scater_1.22.0              
# [4] ggplot2_3.4.2               scuttle_1.4.0               SingleCellExperiment_1.16.0
# [7] SummarizedExperiment_1.24.0 Biobase_2.54.0              GenomicRanges_1.46.1       
# [10] GenomeInfoDb_1.30.1         IRanges_2.28.0              S4Vectors_0.32.4           
# [13] BiocGenerics_0.40.0         MatrixGenerics_1.6.0        matrixStats_0.63.0         
# [16] scDblFinder_1.8.0           SeuratObject_4.1.3          Seurat_4.3.0               
# 
# loaded via a namespace (and not attached):
#   [1] utf8_1.2.3                spatstat.explore_3.1-0    reticulate_1.28          
# [4] R.utils_2.12.2            tidyselect_1.2.0          htmlwidgets_1.6.2        
# [7] grid_4.1.2                BiocParallel_1.28.3       Rtsne_0.16               
# [10] munsell_0.5.0             ScaledMatrix_1.2.0        codetools_0.2-19         
# [13] ica_1.0-3                 statmod_1.5.0             scran_1.22.1             
# [16] xgboost_1.6.0.1           future_1.32.0             miniUI_0.1.1.1           
# [19] withr_2.5.0               spatstat.random_3.1-4     colorspace_2.1-0         
# [22] progressr_0.13.0          rstudioapi_0.14           ROCR_1.0-11              
# [25] tensor_1.5                listenv_0.9.0             labeling_0.4.2           
# [28] GenomeInfoDbData_1.2.7    polyclip_1.10-4           farver_2.1.1             
# [31] parallelly_1.35.0         vctrs_0.6.1               generics_0.1.3           
# [34] timechange_0.2.0          R6_2.5.1                  ggbeeswarm_0.7.2         
# [37] rsvd_1.0.5                locfit_1.5-9.7            bitops_1.0-7             
# [40] spatstat.utils_3.0-2      DelayedArray_0.20.0       promises_1.2.0.1         
# [43] scales_1.2.1              beeswarm_0.4.0            gtable_0.3.3             
# [46] beachmat_2.10.0           globals_0.16.2            goftest_1.2-3            
# [49] rlang_1.1.0               GlobalOptions_0.1.2       splines_4.1.2            
# [52] lazyeval_0.2.2            spatstat.geom_3.1-0       reshape2_1.4.4           
# [55] abind_1.4-5               httpuv_1.6.9              tools_4.1.2              
# [58] ellipsis_0.3.2            RColorBrewer_1.1-3        ggridges_0.5.4           
# [61] Rcpp_1.0.10               plyr_1.8.8                sparseMatrixStats_1.6.0  
# [64] zlibbioc_1.40.0           purrr_1.0.1               RCurl_1.98-1.10          
# [67] deldir_1.0-6              pbapply_1.7-0             viridis_0.6.3            
# [70] cowplot_1.1.1             zoo_1.8-12                ggrepel_0.9.3            
# [73] cluster_2.1.4             magrittr_2.0.3            data.table_1.14.8        
# [76] glmGamPoi_1.6.0           scattermore_0.8           circlize_0.4.15          
# [79] lmtest_0.9-40             RANN_2.6.1                fitdistrplus_1.1-11      
# [82] patchwork_1.1.2           mime_0.12                 xtable_1.8-4             
# [85] gridExtra_2.3             shape_1.4.6               compiler_4.1.2           
# [88] tibble_3.2.1              KernSmooth_2.23-20        R.oo_1.25.0              
# [91] htmltools_0.5.5           later_1.3.0               ggprism_1.0.4            
# [94] tidyr_1.3.0               lubridate_1.9.1           MASS_7.3-58.1            
# [97] Matrix_1.5-3              cli_3.6.0                 R.methodsS3_1.8.2        
# [100] parallel_4.1.2            metapod_1.2.0             igraph_1.4.2             
# [103] forcats_0.5.2             pkgconfig_2.0.3           sp_1.6-0                 
# [106] plotly_4.10.1             spatstat.sparse_3.0-1     paletteer_1.5.0          
# [109] vipor_0.4.5               dqrng_0.3.0               XVector_0.34.0           
# [112] snakecase_0.11.0          stringr_1.5.0             digest_0.6.31            
# [115] sctransform_0.3.5         RcppAnnoy_0.0.20          janitor_2.2.0            
# [118] spatstat.data_3.0-1       leiden_0.4.3              uwot_0.1.14              
# [121] edgeR_3.36.0              DelayedMatrixStats_1.16.0 shiny_1.7.4              
# [124] lifecycle_1.0.3           nlme_3.1-160              jsonlite_1.8.4           
# [127] BiocNeighbors_1.12.0      viridisLite_0.4.2         limma_3.50.3             
# [130] fansi_1.0.4               pillar_1.9.0              lattice_0.20-45          
# [133] ggrastr_1.0.1             fastmap_1.1.1             httr_1.4.6               
# [136] survival_3.4-0            glue_1.6.2                png_0.1-8                
# [139] bluster_1.4.0             stringi_1.7.12            rematch2_2.1.2           
# [142] BiocSingular_1.10.0       dplyr_1.1.2               irlba_2.3.5.1            
# [145] future.apply_1.10.0  

