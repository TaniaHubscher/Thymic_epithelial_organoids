library(edgeR)
library(tidyverse)
library(statmod)
library(limma)
library(Glimma)
library(org.Mm.eg.db)
library(sos)
library(grex)
library(ggplot2)
library(pheatmap)
library(gplots)
library(VennDetail)
library(VennDiagram)
library(EnhancedVolcano)
library(openxlsx)
library(corrr)
library(ggcorrplot)
library(factoextra)
library(dplyr)


### Bulk RNA-Seq data is available here:
#  https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE240698        
# - GSM7707603	Freshly extracted TECs biol rep1
# - GSM7707604	Freshly extracted TECs biol rep2
# - GSM7707605	2D cultured TECs biol rep1
# - GSM7707606	2D cultured TECs biol rep2
# - GSM7707607	TEC organoids D3 biol rep1
# - GSM7707608	TEC organoids D3 biol rep2
# - GSM7707609	TEC organoids D7 biol rep1
# - GSM7707610	TEC organoids D7 biol rep2

# Place all count files in a folder. 
# Set working directory to folder countaing count files. 
# setwd("")

# Change sample names to remove extra characters (counts,txt,...)
file = list.files()
shortname = substring(file,1, nchar(file)-35)


# Create DGE object from count files (each sample in a file, cleaned with only the gene ID column and the sense counts column)
dgeObj <- readDGE(files = list.files())
colnames(dgeObj) <- paste(shortname)


# Remove version of ens gene id
versionID <- rownames(dgeObj$counts)
cleanedID <- cleanid(versionID)
rownames(dgeObj) <- paste(cleanedID)


# Load a text file containing samples meta data (group,...). Make sure that samples are in the same order as in the DGE.
# Complete command with directory containing metadata table. 
# sampleinfo <- read.table("")

# Counts of the djeObject
countdata <- dgeObj$counts
# Compute and plot counts per million 
myCPM <- cpm(countdata)
plot(myCPM[,1],countdata[,1],ylim=c(0,50),xlim=c(0,3))

# Also calcute log CPM as it is used for exploratory plots.
lcpm <- cpm(countdata, log=TRUE)


# Take values above 1 CPM (usually at least )
thresh <- myCPM > 1
# Filter to take only genes that are expressed in at least 3 samples. 
# Comment the command to not filter for positive expression in min 3 samples. Commented for reanalysis for revisions.
keep <- rowSums(thresh) >= 3
counts.keep <- countdata[keep,]

# Update dgeObj
dgeObj <- DGEList(counts.keep, samples = sampleinfo)


# Normalization with TMM: 
dgeObj <- calcNormFactors(dgeObj, method = "TMM")

barplot(dgeObj$samples$lib.size*1e-6, names=colnames(dgeObj), ylab="Library size (millions)", las=2)



# Also calculate log CPM (on the thresholded and normalized dgeObj) as it is used for exploratory plots.
lcpm <- cpm(dgeObj, log=TRUE)


# Quick look at clusters of samples with MDs plot.
plotMDS.DGEList(dgeObj, cex=0.75)


# Design matrix creation
# Establish groups
group <- paste(sampleinfo$Category,sampleinfo$Day, sep=".")
group <- factor(group)
# Specify a design matrix without an intercept term
design <- model.matrix(~ 0 + group)
# Make the column names of the design matrix a bit nicer
colnames(design) <- gsub("group", "", colnames(design))
# Rename rows with sample names - allows to double check that the 1 and 0 in the matrix match what the sample should be
rownames(design) <- colnames(dgeObj)


# Voom-transform the data. 
v <- voom(dgeObj, design, plot = TRUE)
# Visualization
par(mar = c(12, 5, 5, 2))
boxplot(v$E, xlab="", ylab="Log2 counts per million", las=2, main="Voom transformed logCPM")
abline(h=median(v$E),col="blue")

fit <- lmFit(v)


# Contrast matrix creation
contrast.matrix = makeContrasts(
  fresh_vs_plasticD3 = Fresh.D0 - Plastic.D3,
  fresh_vs_orgD7 = Fresh.D0 - Organoids.D7,
  orgD7_vs_plasticD3 = Organoids.D7 - Plastic.D3,
  levels = design)

# Contrast calculation
fit.cont <- contrasts.fit(fit, contrast.matrix)

# Empirical Bayes
res.limma <- eBayes(fit.cont)

# Generate a quick summary of DE genes for the contrasts.
# The total number of DE genes in each direction at a FDR of 5% can be examined with decideTests
summa.fit <- decideTests(fit.cont)
summary(summa.fit)


## For a stricter definition on significance, one may require log-fold-changes (log-FCs) to be above a minimum value. 
# The treat method can be used to calculate p-values from empirical Bayes moderated t-statistics with a minimum log-FC requirement.
tfit <- treat(fit.cont, lfc=1.5)

# Summary 
dt <- decideTests(tfit)
summary(dt)



# Gene annotation (useful to have names)
# list for each comparison

fresh_vs_plasticD3_topTreat <- topTreat(tfit, coef="fresh_vs_plasticD3", n=Inf)

fresh_vs_orgD7_topTreat <- topTreat(tfit, coef="fresh_vs_orgD7", n=Inf)

orgD7_vs_plasticD3_topTreat <- topTreat(tfit, coef="orgD7_vs_plasticD3", n=Inf)


id.symbol <- mapIds(org.Mm.eg.db, keys = rownames(fit.cont$coefficients), keytype = "ENSEMBL", column="SYMBOL")

# Create a gene subset in res.limma (and others)
res.limma$genes <- id.symbol
v$genes <- id.symbol
tfit$genes <- id.symbol


# Also map ENTREZ ID for genes as they are required for go analysis
entrezID <- mapIds(org.Mm.eg.db, keys = rownames(fit.cont$coefficients), keytype = "ENSEMBL", column="ENTREZID")

res.limma$EntID <- entrezID
v$gEntID <- entrezID
tfit$EntID <- entrezID
dt$EntID <- entrezID



write.table(v, file = "VoomExpression.csv", sep = "\t",
            row.names = TRUE, col.names = TRUE)
## Convert to .xlsx to use later for clustering analysis. 
## Remove column with gene names, only keep comparisons and values as here:
## 2D_1	        2D_2	      Fresh_1	    Fresh_2	     Org_1	    Org_2
## 3.919756141	3.850968455	3.646877262	4.006613627	4.027765308	4.939980985
## 5.527848516	5.052202733	5.424888222	5.39922336	5.2379379	  5.462174439
##...



# For all the comparisons in the contrast matrix
resultsTable <- topTable(res.limma, p.value=0.01, adjust.method="BH", sort.by="F", number=nrow(res.limma))
write.table(resultsTable, file = "ResultTableAll.csv", sep = "\t",
            row.names = TRUE, col.names = TRUE)



# PCA to create dendrogram

InputPCA <- read.xlsx("VoomExpression.xlsx")
# modified .xlsx file as explained above

corr_matrix <- cor(InputPCA)
ggcorrplot(corr_matrix)
data.pca <- princomp(corr_matrix)
summary(data.pca)
fviz_eig(data.pca, addlabels = TRUE)

fviz_pca_var(data.pca, col.var = "black", habillage=colnames(InputPCA)) + NoLegend()

fviz_cos2(data.pca, choice = "var", axes = 1:2)

fviz_pca_var(data.pca, col.var = "cos2",
            gradient.cols = c("black", "orange", "green"),
            repel = TRUE)


hclust(InputPCA, method = "complete", members = NULL)

Inputhclust <- t(InputPCA)
# Distance matrix
d <- dist(Inputhclust)

# Hierarchical clustering
hc <- hclust(d)

# Dendrogram
plot(hc)

plot(as.dendrogram(hc))





sessionInfo()
R version 4.1.2 (2021-11-01)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 22631)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252   
[3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C                          
[5] LC_TIME=English_United States.1252    

attached base packages:
[1] grid      stats4    stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] factoextra_1.0.7       ggcorrplot_0.1.4       corrr_0.4.4           
 [4] openxlsx_4.2.5.2       EnhancedVolcano_1.12.0 ggrepel_0.9.3         
 [7] VennDiagram_1.7.3      futile.logger_1.4.3    gplots_3.1.3          
[10] pheatmap_1.0.12        grex_1.9               sos_2.1-4             
[13] brew_1.0-8             org.Mm.eg.db_3.14.0    AnnotationDbi_1.56.2  
[16] IRanges_2.28.0         S4Vectors_0.32.4       Biobase_2.54.0        
[19] BiocGenerics_0.40.0    statmod_1.5.0          forcats_0.5.2         
[22] stringr_1.5.0          dplyr_1.1.2            purrr_1.0.1           
[25] readr_2.1.3            tidyr_1.3.0            tibble_3.2.1          
[28] ggplot2_3.4.2          tidyverse_1.3.2        edgeR_3.36.0          
[31] limma_3.50.3          

loaded via a namespace (and not attached):
 [1] googledrive_2.1.0      ggbeeswarm_0.7.2       colorspace_2.1-0      
 [4] ggsignif_0.6.4         XVector_0.34.0         fs_1.5.2              
 [7] rstudioapi_0.14        ggpubr_0.6.0           farver_2.1.1          
[10] bit64_4.0.5            fansi_1.0.4            lubridate_1.9.1       
[13] xml2_1.3.3             extrafont_0.19         cachem_1.0.7          
[16] jsonlite_1.8.4         broom_1.0.4            Rttf2pt1_1.3.12       
[19] dbplyr_2.3.2           png_0.1-8              compiler_4.1.2        
[22] httr_1.4.6             backports_1.4.1        fastmap_1.1.1         
[25] gargle_1.4.0           cli_3.6.0              formatR_1.14          
[28] tools_4.1.2            gtable_0.3.3           glue_1.6.2            
[31] GenomeInfoDbData_1.2.7 reshape2_1.4.4         maps_3.4.1            
[34] Rcpp_1.0.10            carData_3.0-5          cellranger_1.1.0      
[37] vctrs_0.6.1            Biostrings_2.62.0      ggalt_0.4.0           
[40] extrafontdb_1.0        rvest_1.0.3            timechange_0.2.0      
[43] lifecycle_1.0.3        gtools_3.9.4           rstatix_0.7.2         
[46] googlesheets4_1.1.0    zlibbioc_1.40.0        MASS_7.3-58.1         
[49] scales_1.2.1           hms_1.1.3              proj4_1.0-12          
[52] lambda.r_1.2.4         RColorBrewer_1.1-3     memoise_2.0.1         
[55] gridExtra_2.3          ggrastr_1.0.1          stringi_1.7.12        
[58] RSQLite_2.3.1          caTools_1.18.2         zip_2.2.2             
[61] GenomeInfoDb_1.30.1    rlang_1.1.0            pkgconfig_2.0.3       
[64] bitops_1.0-7           lattice_0.20-45        labeling_0.4.2        
[67] bit_4.0.5              tidyselect_1.2.0       plyr_1.8.8            
[70] magrittr_2.0.3         R6_2.5.1               generics_0.1.3        
[73] DBI_1.1.3              pillar_1.9.0           haven_2.5.1           
[76] withr_2.5.0            abind_1.4-5            KEGGREST_1.34.0       
[79] RCurl_1.98-1.10        ash_1.0-15             car_3.1-2             
[82] modelr_0.1.11          crayon_1.5.2           futile.options_1.0.1  
[85] KernSmooth_2.23-20     utf8_1.2.3             tzdb_0.3.0            
[88] locfit_1.5-9.7         readxl_1.4.2           blob_1.2.4            
[91] reprex_2.0.2           munsell_0.5.0          beeswarm_0.4.0        
[94] vipor_0.4.5        
